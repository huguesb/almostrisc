
extended instruction set :

	|F|E|D|C|B|A|9|8|7|6|5|4|3|2|1|0| 
	|-------------------------------|

done (tested)
	|-------------------------------|
	|1 1 1 1|1 1 1 1|1 1 1 1|1 1 1 0| reti
	|-------------------------------|
	|1 1 1 0|0 1 0 0|0 0|  Ra |  Rd | exw rd, ra <=> ((ra), rd) = (rd, (ra))
	|-------------------------------|
	|1 1 1 1|1 1 1 1|1 1 1 1 0|  Rd |
	|            imm16              | liw rd, imm16
	|-------------------------------|
	|1 1 1 1|1 0 0|  cc |  Ra |x x x|
	|            imm16              | baicc ra, imm16
	|-------------------------------|
	|1 1 1 1|1 0 1|  cc |  Ra |  Rd |
	|            imm16              | bailcc rd, ra, imm16
    |-------------------------------|
	|0 0 0 1|1 H H|  Rb |  Ra |  Rd | mix(h|l)(h|l) rd, ra, rb
	|-------------------------------|
	|0 0 1 1|1 S L|  Rb |  Ra |  Rd | r(r|s)(r|l) rd, ra, rb
	|-------------------------------|
	|1 1 1 1|1 1 0|  Rb |  Ra |  Rd | mul rd, ra, rb => ra:rd = ra * rb
	|-------------------------------|

considered (not implemented)
	|-------------------------------|
	|1 1 1 0|0 1 0 0|1 0|     |  Rd | push rd <=> dec r7 \ sw rd, r7
	|1 1 1 0|0 1 0 0|1 1|     |  Rd | pop rd <=> lw rd, r7 \ inc r7
	|-------------------------------|
	|                               | exx (switch register banks (and disable interrupts?) )
    |-------------------------------|
	|1 1 1 0|0 1 0 1|bnk|  Ra |  Rd | ex rd, ra <=> (ra, rd) = (rd, ra)   [lotsa wiring...]
	|-------------------------------|
    
 timings :
	* bai(l)cc  : 4cc (could be brought down to 3)
	* branching : 3cc
	* mem read  : 2cc
	* liw       : 2cc
	* others    : 1cc

 possible extensions
	* register swap (gnl)
	* stack manipulation (gnl) : no special purpose reg??? UAL hack???
	* interrupts-related (gnl)
	* multiplication/division (op)
	* streamed
	* add/sub with immediates?
	* bit test/set/reset
		li	rb, 0x??? : .|....|iiii : i=bit index
		bit	rd, ra, rb
		set	rd, ra, rb
		res	rd, ra, rb
	* bit mask/spill
		bmsk	rd, ra, imm4
		bspl	rd, ra, imm4
	* indexed memory access :
		lw	rd, ra, rb
		lw	rd, ra, imm?

 ALIASES :
	
	movh rx, ry = mixhl rx, ry, rx
	movl rx, ry = mixhl rx, rx, ry
	
	exhl rx, ry = mixlh rx, ry, ry
	            = li rx, 7 \ rrr rx, ry, rx
	            = li rx, 7 \ rrl rx, ry, rx

 ROOM for instructions :
 
	* UAL operations :
		candidates : scf, ccf, clrf, nand, nor, xnor
		
		* 4 between negb and and
			001100 : mixhh
			001101 : mixhl
			001110 : mixlh
			001111 : mixll
			
		* 12 between not and shl
			010100
			010101
			
			010110
			010111
			
			011000
			011001
			
			011010
			011011
			
			011100
			011101
			
			011110
			011111

	* "variants" (assuming fixed value for 'x' bits) [spec apparently does not allow this...]
		* 63 "variants" of in
		* 63 "variants" of out
		* 7 "variants" of lw (conditionals?)
		* 7 "variants" of sw (conditionals?)
		* 7 "variants" of brl (conditionals?)
		* 7 "variants" of bal (conditionals?)
		
	* brand new
		* 11011  prefix : 2^11 = 2048 (from out to brcc)
		* 111001 prefix : 2^10 = 1024 (from brcc/bacc to ..)
			# exw : 2^6 = 64
		* 11101  prefix : 2^11 = 2048 (.. to brl/bal)
		* 111101 prefix : 2^10 = 1024 (from bal to xx)
		* 11111  prefix : 2^11-2 = 2046 (from xx to reset)
			# baicc imm16
			# bailcc imm16
			# mul
			# liw
			# reti
			# reset
		
		=> 8k instruction slots
