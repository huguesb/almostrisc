ISA description

	|-------------------------------|
	|F|E|D|C|B|A|9|8|7|6|5|4|3|2|1|0| 
	|-------------------------------|

basic instruction set :
	|-------------------------------|
	|1 1 1 1|1 1 1 1|1 1 1 1|1 1 1 1| reset     %pc = 0
	|-------------------------------|
	|1 1 0 1|0 1 0 x|x x x x|x|  Rd | in        %rd = PIN
	|-------------------------------|
	|1 1 0 1|0 1 1|  Rb |x x x x x x| out       POUT = %rb
	|-------------------------------|
	|0|    op     |  Rb |  Ra |  Rd | ual       %rd = %ra OP %rb
	|-------------------------------|
	|1 1 0 1|0 0 0 x|x x|  Ra |  Rd | lw        %rd = MEM(%ra)
	|-------------------------------|
	|1 1 0 1|0 0 1 x|x x|  Ra |  Rd | sw        MEM(%ra) = %rd
	|-------------------------------|
	|1 1 1 0|0 0 0|  Rb |  Ra |  cc | brcc      %pc += %ra valide cc ? %rb : 1
	|-------------------------------|
	|1 1 1 0|0 0 1|  Rb |  Ra |  cc | bacc      %pc = %ra valide cc ?  %rb : %pc + 1
	|-------------------------------|
	|1 0|     imm8      |  Ra |  cc | bricc     %pc += %ra valide cc ? ext2(imm8) : 1
	|-------------------------------|
	|1 1 0 0|      imm9       |  Rd | li        %rd = ext2(imm9)
	|-------------------------------|
	|1 1 1 1|0 0 0|x x x|  Rb |  Rd | brl       %rd = %pc, %pc = %pc + %rb
	|-------------------------------|
	|1 1 1 1|0 0 1|x x x|  Rb |  Rd | bal       %rd = %pc, %pc = %rb
	|-------------------------------|

extended instruction set :
	|-------------------------------|
	|1 1 1 1|1 1 1 1|1 1 1 1|1 1 1 0| reti                  retour d'interruption
	|-------------------------------|
	|1 1 1 0|0 1 0 0|0 0|  Ra |  Rd | exw rd,ra             (MEM(%ra), %rd) := (%rd, MEM(%ra))
	|-------------------------------|
	|1 1 1 1|1 1 1 1|1 1 1 1 0|  Rd | liw rd,imm16          %rd = imm16
	|            imm16              |
	|-------------------------------|
	|1 1 1 1|1 0 0|  cc |  Ra |x x x| baicc ra,imm16        %ra valide cc ? %pc = imm16
	|            imm16              |                       : %pc = %pc + 1
	|-------------------------------|
	|1 1 1 1|1 0 1|  cc |  Ra |  Rd | bailcc rd,ra,imm16    %ra valide cc ? %rd=%pc, %pc=imm16
	|            imm16              |                       : %pc = %pc + 1
    |-------------------------------|
	|0 0 0 1|1 H H|  Rb |  Ra |  Rd | mix[hl][hl] rd,ra,rb  %rd = high/low(%ra) & high/low(%rb)
	|-------------------------------|
	|0 0 1 1|1 S L|  Rb |  Ra |  Rd | r[rs][rl] rd,ra,rb    %rd = %ra (<<|>>) (%rb & 15)
	|-------------------------------|
	|1 1 1 1|1 1 0|  Rb |  Ra |  Rd | mul rd,ra,rb          %ra & %rd = %ra * %rb
	|-------------------------------|
	|1 1 1 1|0 1|i i i i|  Ra |  Rd | bspl rd,ra,imm4       %rd = (15 downto 0 => %ra(imm4))
	|-------------------------------|

operation codes :
	|-----------|
	|0 0 0 0 0 0| nop
	|-----------|
	|0 0 0 0 1 0| inc
	|0 0 0 0 1 1| dec
	|0 0 0 1 0 0| add
	|0 0 0 1 0 1| sub
	|0 0 0 1 1 0| adc
	|0 0 0 1 1 1| sbc
	|-----------|
	|0 0 1 0 0 0| mova
	|0 0 1 0 0 1| movb
	|-----------|
	|0 0 1 0 1 0| nega
	|0 0 1 0 1 1| negb
	|-----------|
	|0 0 1 1 0 0| mixhh  [extension]
	|0 0 1 1 0 1| mixhl  [extension]
	|0 0 1 1 1 0| mixlh  [extension]
	|0 0 1 1 1 1| mixll  [extension]
	|-----------|
	|0 1 0 0 0 0| and
	|0 1 0 0 0 1| or
	|0 1 0 0 1 0| xor
	|0 1 0 0 1 1| not
	|-----------|
	|0 1 1 1 0 0| rrr    [extension]
	|0 1 1 1 0 1| rrl    [extension]
	|0 1 1 1 1 0| rsr    [extension]
	|0 1 1 1 1 1| rsl    [extension]
	|-----------|
	|1 0|  dcl  | shl
	|1 1|  dcl  | shr
	|-----------|

condition codes :
	|-----|
	|0 0 0| eq
	|0 0 1| ge
	|0 1 0| le
	|0 1 1| true
	|-----|
	|1 0 0| ne
	|1 0 1| lt
	|1 1 0| gt
	|1 1 1| false
	|-----|
	