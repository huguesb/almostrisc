#!/bin/bash

awk_script='BEGIN { FS = "\"| *=> *x\""; pc=-1; } /[0-9]+ *=> *x"[0-9A-F]+"/ { if ( $1 != pc ) { if ( pc < 0 ) { pc = $1 } else { while ( $1 != pc ) { print "0000 // fill"; pc = pc + 1; }  printf "// "; } printf "@%x\n", $1 } print $2; pc = pc + 1; }'

# compiles demo code into ROMPROG (for simulation using GHDL)
printf "%s\n%s\n%s\n" "$(head -n 27 <vhdl/ROMPROG.vhd)" "$(./asrisc assembler/opcodes.js demo/demo.asm 2>&1)" "$(tail -n 10 < vhdl/ROMPROG.vhd)" > vhdl/ROMPROG.vhd

# compiles demo data into RAMDoublePort (for simulation using GHDL)
printf "%s\n%s\n%s\n" "$(head -n 38 <vhdl/RAMDoublePort.vhd)" "$(./asrisc assembler/data.js demo/data.asm 2>&1)" "$(tail -n 31 < vhdl/RAMDoublePort.vhd)" > vhdl/RAMDoublePort.vhd

# compiles demo into .mem (for use on fpga)
./asrisc assembler/opcodes.js demo/demo.asm 2>&1 | awk "$awk_script" > bitmagic/brom.mem
./asrisc assembler/data.js demo/data.asm 2>&1 | awk "$awk_script" > bitmagic/dram.mem

# # update HDL (for simulation in Xilinx)
# data2mem -bm bitmagic/brom.bmm  -bd bitmagic/brom.mem -o h bitmagic/brom_data.vhd
# data2mem -bm bitmagic/dram.bmm  -bd bitmagic/dram.mem -o h bitmagic/dram_data.vhd

# final bitfile update
data2mem -bd bitmagic/brom.mem -bm bitmagic/brom_bd.bmm -bt ise9/ProcesseurAndCo.bit -o b cpu-prog.bit
data2mem -bd bitmagic/dram.mem -bm bitmagic/dram_bd.bmm -bt cpu-prog.bit -o b cpu-prog-data.bit
